name: mp3_voicy
on:
  schedule:
    - cron: '0 * * * *'  # 毎時実行
  workflow_dispatch:  # 手動実行用

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: gh-pages
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager requests beautifulsoup4 ffmpeg-python
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Download MP3
        run: |
          mkdir -p docs/podcast
          python -c "
          import os
          import re
          import time
          import json
          import traceback
          import subprocess
          import requests
          from datetime import datetime
          from bs4 import BeautifulSoup
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from webdriver_manager.chrome import ChromeDriverManager
          
          # MP3保存先ディレクトリ
          MP3_DIR = 'docs/podcast'
          os.makedirs(MP3_DIR, exist_ok=True)
          
          # Voicyチャンネル情報
          CHANNEL_ID = '2834'  # パジ郎チャンネル
          CHANNEL_URL = f'https://voicy.jp/channel/{CHANNEL_ID}/all'  # 全エピソード一覧ページ
          
          # ダウンロードする最新エピソード数
          MAX_EPISODES = 3  # ユーザー要件に基づき3件に設定
          
          # タイトル修正用のグローバル変数
          correct_title = None
          
          # 有料配信判定用のグローバル変数
          correct_premium_status = None
          
          def download_m3u8_to_mp3(m3u8_url, output_file):
              """m3u8ファイルをMP3に変換してダウンロード"""
              print('::group::m3u8からMP3への変換')
              print(f'm3u8 URL: {m3u8_url}')
              print(f'出力ファイル: {output_file}')
              
              try:
                  # FFmpegコマンドを実行
                  cmd = [
                      'ffmpeg',
                      '-y',  # 既存ファイルを上書き
                      '-loglevel', 'warning',  # ログレベル
                      '-i', m3u8_url,  # 入力ファイル
                      '-c:a', 'libmp3lame',  # MP3エンコーダ
                      '-q:a', '2',  # 音質設定（0-9、低いほど高音質）
                      output_file  # 出力ファイル
                  ]
                  
                  print('FFmpegコマンド: ' + ' '.join(cmd))
                  result = subprocess.run(cmd, capture_output=True, text=True)
                  
                  if result.returncode == 0:
                      print('MP3への変換が成功しました')
                      print('::endgroup::')
                      return True
                  else:
                      print('MP3への変換に失敗しました')
                      print(f'エラー: {result.stderr}')
                      
                      # 代替方法を試す
                      print('代替方法でMP3への変換を試みます')
                      alt_cmd = [
                          'ffmpeg',
                          '-y',
                          '-loglevel', 'warning',
                          '-i', m3u8_url,
                          '-c', 'copy',
                          output_file.replace('.mp3', '.aac')
                      ]
                      
                      print('代替FFmpegコマンド: ' + ' '.join(alt_cmd))
                      alt_result = subprocess.run(alt_cmd, capture_output=True, text=True)
                      
                      if alt_result.returncode == 0:
                          # aacをmp3に変換
                          aac_to_mp3_cmd = [
                              'ffmpeg',
                              '-y',
                              '-loglevel', 'warning',
                              '-i', output_file.replace('.mp3', '.aac'),
                              '-c:a', 'libmp3lame',
                              '-q:a', '2',
                              output_file
                          ]
                          
                          print('aacからmp3への変換コマンド: ' + ' '.join(aac_to_mp3_cmd))
                          mp3_result = subprocess.run(aac_to_mp3_cmd, capture_output=True, text=True)
                          
                          if mp3_result.returncode == 0:
                              print('代替方法でMP3への変換が成功しました')
                              # 一時ファイルを削除
                              os.remove(output_file.replace('.mp3', '.aac'))
                              print('::endgroup::')
                              return True
                          else:
                              print('代替方法でもMP3への変換に失敗しました')
                              print(f'エラー: {mp3_result.stderr}')
                      else:
                          print('代替方法でもaacへの変換に失敗しました')
                          print(f'エラー: {alt_result.stderr}')
              except Exception as e:
                  print(f'MP3への変換中にエラーが発生しました: {str(e)}')
                  traceback.print_exc()
              
              print('::endgroup::')
              return False
          
          def get_channel_episodes():
              """チャンネルの最新エピソードを取得し オーディオURLも直接取得する"""
              print('::group::チャンネルエピソード取得')
              print(f'チャンネルURL: {CHANNEL_URL}')
              print('全エピソード一覧ページから直接オーディオURLを取得します')
              
              try:
                  # Chromeオプションを設定
                  chrome_options = Options()
                  chrome_options.add_argument('--headless')
                  chrome_options.add_argument('--no-sandbox')
                  chrome_options.add_argument('--disable-dev-shm-usage')
                  chrome_options.add_argument('--disable-gpu')
                  chrome_options.add_argument('--window-size=1920,1080')
                  
                  # オーディオリクエストをキャプチャするためのJavaScriptを追加
                  chrome_options.add_argument('--auto-open-devtools-for-tabs')
                  
                  # WebDriverを初期化
                  service = Service(ChromeDriverManager().install())
                  driver = webdriver.Chrome(service=service, options=chrome_options)
                  
                  # オーディオリクエストをキャプチャするためのJavaScriptを実行
                  driver.execute_script("""
                  // オーディオリクエストを保存する配列
                  window.audioRequests = [];
                  window.episodeAudioMap = {};
                  
                  // XMLHttpRequestをオーバーライド
                  var originalXHR = window.XMLHttpRequest;
                  window.XMLHttpRequest = function() {
                      var xhr = new originalXHR();
                      var originalOpen = xhr.open;
                      var originalSend = xhr.send;
                      
                      xhr.open = function() {
                          this.requestURL = arguments[1];
                          return originalOpen.apply(this, arguments);
                      };
                      
                      xhr.send = function() {
                          if (this.requestURL && (this.requestURL.includes('.m3u8') || this.requestURL.includes('playlist') || this.requestURL.includes('audio'))) {
                              // URLからエピソードIDを抽出
                              var episodeIdMatch = this.requestURL.match(/episode[\\/=](\\d+)/i) || this.requestURL.match(/\\/(\\d+)\\/playlist/);
                              var episodeId = episodeIdMatch ? episodeIdMatch[1] : null;
                              
                              var requestInfo = {
                                  url: this.requestURL,
                                  episodeId: episodeId,
                                  timestamp: new Date().toISOString()
                              };
                              
                              window.audioRequests.push(requestInfo);
                              
                              if (episodeId) {
                                  if (!window.episodeAudioMap[episodeId]) {
                                      window.episodeAudioMap[episodeId] = [];
                                  }
                                  window.episodeAudioMap[episodeId].push(requestInfo);
                              }
                              
                              console.log('Audio URL detected:', this.requestURL, 'Episode ID:', episodeId);
                          }
                          return originalSend.apply(this, arguments);
                      };
                      
                      return xhr;
                  };
                  
                  // Fetch APIもオーバーライド
                  var originalFetch = window.fetch;
                  window.fetch = function() {
                      var url = arguments[0];
                      if (typeof url === 'string' && (url.includes('.m3u8') || url.includes('playlist') || url.includes('audio'))) {
                          // URLからエピソードIDを抽出
                          var episodeIdMatch = url.match(/episode[\\/=](\\d+)/i) || url.match(/\\/(\\d+)\\/playlist/);
                          var episodeId = episodeIdMatch ? episodeIdMatch[1] : null;
                          
                          var requestInfo = {
                              url: url,
                              episodeId: episodeId,
                              timestamp: new Date().toISOString()
                          };
                          
                          window.audioRequests.push(requestInfo);
                          
                          if (episodeId) {
                              if (!window.episodeAudioMap[episodeId]) {
                                  window.episodeAudioMap[episodeId] = [];
                              }
                              window.episodeAudioMap[episodeId].push(requestInfo);
                          }
                          
                          console.log('Audio URL detected (fetch):', url, 'Episode ID:', episodeId);
                      }
                      return originalFetch.apply(this, arguments);
                  };
                  """)
                  
                  # チャンネルページにアクセス
                  driver.get(CHANNEL_URL)
                  print('チャンネルページにアクセスしました')
                  
                  # ページが完全に読み込まれるまで待機
                  WebDriverWait(driver, 10).until(
                      EC.presence_of_element_located((By.CSS_SELECTOR, '.episodeList'))
                  )
                  print('ページが読み込まれました')
                  
                  # エピソードリストを取得
                  episode_elements = driver.find_elements(By.CSS_SELECTOR, '.episodeList .episodeItem')
                  print(f'エピソード数: {len(episode_elements)}')
                  
                  # 最新のMAX_EPISODES件のエピソードを処理
                  episodes = []
                  for i, episode_element in enumerate(episode_elements[:MAX_EPISODES]):
                      try:
                          # エピソード情報を取得
                          episode_id_element = episode_element.find_element(By.CSS_SELECTOR, '.episodeItem__link')
                          episode_url = episode_id_element.get_attribute('href')
                          episode_id = episode_url.split('/')[-1]
                          
                          title_element = episode_element.find_element(By.CSS_SELECTOR, '.episodeItem__title')
                          title = title_element.text.strip()
                          
                          date_element = episode_element.find_element(By.CSS_SELECTOR, '.episodeItem__date')
                          date_text = date_element.text.strip()
                          date_match = re.search(r'(\\d{4})年(\\d{1,2})月(\\d{1,2})日', date_text)
                          if date_match:
                              year = date_match.group(1)
                              month = date_match.group(2).zfill(2)
                              day = date_match.group(3).zfill(2)
                              date = f'{year}{month}{day}'
                          else:
                              date = datetime.now().strftime('%Y%m%d')
                          
                          # 有料配信かどうかを判定（新しいアプローチ）
                          is_premium = False
                          try:
                              # 有料マークの有無で判定
                              premium_element = episode_element.find_element(By.CSS_SELECTOR, '.episodeItem__premium')
                              if premium_element:
                                  is_premium = True
                          except:
                              # 有料マークがない場合は無料配信と判定
                              pass
                          
                          # 再生ボタンをクリックしてオーディオURLを取得
                          play_button = episode_element.find_element(By.CSS_SELECTOR, '.episodeItem__play')
                          play_button.click()
                          print(f'エピソード {episode_id} の再生ボタンをクリックしました')
                          
                          # オーディオURLが取得されるまで待機
                          time.sleep(3)
                          
                          # JavaScriptからオーディオURLを取得
                          audio_urls = driver.execute_script(f"return window.episodeAudioMap['{episode_id}'] || [];")
                          
                          # m3u8 URLを探す
                          m3u8_url = None
                          for audio_info in audio_urls:
                              url = audio_info.get('url', '')
                              if '.m3u8' in url:
                                  m3u8_url = url
                                  break
                          
                          if not m3u8_url:
                              # 直接オーディオURLを探す代替方法
                              all_audio_urls = driver.execute_script("return window.audioRequests;")
                              for audio_info in all_audio_urls:
                                  url = audio_info.get('url', '')
                                  if '.m3u8' in url and episode_id in url:
                                      m3u8_url = url
                                      break
                          
                          # エピソード情報を追加
                          episode_info = {
                              'id': episode_id,
                              'title': title,
                              'date': date,
                              'is_premium': is_premium,
                              'audio_url': m3u8_url
                          }
                          
                          print(f'エピソード情報: {episode_info}')
                          episodes.append(episode_info)
                          
                      except Exception as e:
                          print(f'エピソード情報の取得中にエラーが発生しました: {str(e)}')
                          traceback.print_exc()
                  
                  # ブラウザを閉じる
                  driver.quit()
                  print('ブラウザを閉じました')
                  print('::endgroup::')
                  return episodes
                  
              except Exception as e:
                  print(f'チャンネルエピソードの取得中にエラーが発生しました: {str(e)}')
                  traceback.print_exc()
                  print('::endgroup::')
                  return []
          
          def download_episode(episode):
              """エピソードをダウンロード"""
              print('::group::エピソードダウンロード')
              episode_id = episode['id']
              title = episode['title']
              date = episode['date']
              is_premium = episode['is_premium']
              
              print(f'エピソードID: {episode_id}')
              print(f'タイトル: {title}')
              print(f'日付: {date}')
              print(f'有料配信: {\"はい\" if is_premium else \"いいえ\"}')
              
              # ファイル名を生成
              if is_premium:
                  # 有料放送: _{date}_{title}_{id}.mp3
                  mp3_file = f'_{date}_{title}_{episode_id}.mp3'
              else:
                  # 無料放送: {date}_{title}_{id}.mp3
                  mp3_file = f'{date}_{title}_{episode_id}.mp3'
              
              # ファイル名に使えない文字を置換
              mp3_file = mp3_file.replace('/', '_').replace('\\\\', '_').replace(':', '_').replace('*', '_').replace('?', '_').replace('\"', '_').replace('<', '_').replace('>', '_').replace('|', '_')
              
              # MP3ファイルのパス
              mp3_path = os.path.join(MP3_DIR, mp3_file)
              
              # 既にダウンロード済みかチェック
              if os.path.exists(mp3_path):
                  print('既にダウンロード済みです: ' + mp3_file)
                  print('::endgroup::')
                  return mp3_path
              
              # オーディオURLが既に取得されているか確認
              if 'audio_url' in episode and episode['audio_url']:
                  audio_url = episode['audio_url']
                  print('既に取得済みのオーディオURLを使用します: ' + audio_url)
                  
                  # m3u8ファイルをMP3に変換してダウンロード
                  if download_m3u8_to_mp3(audio_url, mp3_path):
                      print('ダウンロードが完了しました: ' + mp3_file)
                      print('::endgroup::')
                      return mp3_path
                  else:
                      print('ダウンロードに失敗しました')
                      print('::endgroup::')
                      return None
              else:
                  print('オーディオURLが見つかりませんでした')
                  print('::endgroup::')
                  return None
          
          def main():
              """メイン処理"""
              print('=== Voicy MP3ダウンローダー ===')
              print('チャンネル: ' + CHANNEL_URL)
              print('MP3保存先: ' + MP3_DIR)
              
              # チャンネルの最新エピソードを取得
              episodes = get_channel_episodes()
              if not episodes:
                  print('エピソードが見つかりませんでした')
                  return
              
              # エピソードをダウンロード
              downloaded_files = []
              for episode in episodes:
                  mp3_file = download_episode(episode)
                  if mp3_file:
                      downloaded_files.append(mp3_file)
              
              # ダウンロード結果を表示
              print('\\n=== ダウンロード結果 ===')
              print(f'{len(downloaded_files)}/{len(episodes)}個のエピソードをダウンロードしました')
              
              # MP3ファイルの一覧を表示
              mp3_files = [f for f in os.listdir(MP3_DIR) if f.endswith('.mp3')]
              for i, mp3_file in enumerate(mp3_files, 1):
                  mp3_path = os.path.join(MP3_DIR, mp3_file)
                  file_size_mb = os.path.getsize(mp3_path) / (1024 * 1024)
                  
                  # 有料放送の場合
                  if mp3_file.startswith('_'):
                      # 有料放送: _日付_タイトル_ID.mp3
                      match = re.match(r'_(.+)_(\\d+)\\.mp3', mp3_file)
                      if match:
                          date_title = match.group(1)
                          episode_id = match.group(2)
                          print(f'{i}. 【有料】 {date_title} ({file_size_mb:.1f}MB)')
                  else:
                      # 無料放送: 日付_タイトル_ID.mp3
                      match = re.match(r'(.+)_(\\d+)\\.mp3', mp3_file)
                      if match:
                          date_title = match.group(1)
                          episode_id = match.group(2)
                          print(f'{i}. {date_title} ({file_size_mb:.1f}MB)')
          
          # メイン処理を実行
          main()
          "
      
      - name: Commit and push
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          git add docs/podcast
          git commit -m "Update MP3 files" || echo "No changes to commit"
          git push
