name: Podcast RSS Generator

# 書き込み権限を明示的に要求
permissions:
  contents: write

on:
  schedule:
    - cron: '3 * * * *'  # 毎時間3分に実行
  workflow_dispatch:  # 手動実行用
  push:
    paths:
      - 'docs/podcast/**'  # podcast フォルダに変更があった場合に実行

jobs:
  generate-rss:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
      - name: Create scripts directory
        run: mkdir -p .github/scripts
        
      - name: Create Python script
        run: |
          cat > .github/scripts/generate_podcast_rss.py << 'EOF'
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-

          import os
          import glob
          import datetime
          import time
          import re
          from feedgen.feed import FeedGenerator
          import xml.etree.ElementTree as ET

          # 基本設定
          PODCAST_DIR = 'docs/podcast'
          OUTPUT_FILE = 'docs/podcast.xml'
          BASE_URL = 'https://paji.github.io/Spotify'

          # ポッドキャスト情報
          PODCAST_TITLE = 'Spotify Podcast'
          PODCAST_DESCRIPTION = 'Spotify向けのポッドキャスト'
          PODCAST_AUTHOR = 'paji'
          PODCAST_EMAIL = 'info@example.com'  # 適切なメールアドレスに変更してください
          PODCAST_IMAGE = f'{BASE_URL}/podcast_cover.jpg'  # カバー画像がある場合のURL
          PODCAST_CATEGORY = 'Technology'

          def get_mp3_metadata(filepath):
              """
              ファイル名から簡易的なメタデータを抽出する
              例: '2024-03-19_episode_title.mp3' -> {'date': '2024-03-19', 'title': 'episode title'}
              """
              filename = os.path.basename(filepath)
              # ファイル名から日付とタイトルを抽出する正規表現
              match = re.match(r'(\d{4}-\d{2}-\d{2})_(.+)\.mp3', filename)
              
              if match:
                  date_str, title = match.groups()
                  title = title.replace('_', ' ')  # アンダースコアをスペースに変換
                  try:
                      # 日付文字列をパースしてUTCタイムゾーンを設定
                      pub_date = datetime.datetime.strptime(date_str, '%Y-%m-%d')
                      pub_date = pub_date.replace(tzinfo=datetime.timezone.utc)
                      return {
                          'title': title,
                          'date': pub_date,
                          'filename': filename
                      }
                  except ValueError:
                      pass
              
              # 日付形式が一致しない場合はファイルの更新日時を使用
              file_mtime = os.path.getmtime(filepath)
              return {
                  'title': os.path.splitext(filename)[0].replace('_', ' '),
                  'date': datetime.datetime.fromtimestamp(file_mtime, tz=datetime.timezone.utc),
                  'filename': filename
              }

          def file_size(filepath):
              """ファイルサイズをバイト単位で返す"""
              return os.path.getsize(filepath)

          def generate_rss():
              # RSSフィードのXMLを直接構築
              rss_content = """<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">
  <channel>
    <title>裏・パジちゃんねる</title>
    <description>ブロックチェーンやAIなど最新テクノロジーについての考察を毎日配信、濃密情報はプレミアムへ→ https://voicy.jp/channel/2834/all?premium=1

パジの日々の挑戦を記録していきます</description>
    <link>https://voicy.jp/channel/2834/all?premium=1</link>
    <language>ja</language>
    <copyright>© 2025 パジ</copyright>
    <webMaster>hajimeataka@gmail.com</webMaster>
    <ttl>60</ttl>
    <itunes:explicit>no</itunes:explicit>
    <itunes:author>パジ</itunes:author>
    <itunes:owner>
      <itunes:name>パジ</itunes:name>
      <itunes:email>hajimeataka@gmail.com</itunes:email>
    </itunes:owner>
    <itunes:category text="Technology" />
    <image>
      <url>https://pbs.twimg.com/profile_images/1616257394815954945/2W90KByr_400x400.jpg</url>
      <title>裏・パジちゃんねる</title>
      <link>https://voicy.jp/channel/2834/all?premium=1</link>
    </image>
    <itunes:image href="https://pbs.twimg.com/profile_images/1616257394815954945/2W90KByr_400x400.jpg" />
"""
              
              # mp3ファイル一覧を取得し日付順にソート
              mp3_files = glob.glob(os.path.join(PODCAST_DIR, '*.mp3'))
              mp3_metadata = [get_mp3_metadata(f) for f in mp3_files]
              mp3_metadata.sort(key=lambda x: x['date'], reverse=True)
              
              # 各エピソードの情報を追加
              for idx, meta in enumerate(mp3_metadata):
                  filepath = os.path.join(PODCAST_DIR, meta['filename'])
                  file_url = f"https://raw.githubusercontent.com/paji/Spotify/gh-pages/{PODCAST_DIR}/{meta['filename']}"
                  file_size_bytes = str(file_size(filepath))
                  
                  item_xml = f"""    <item>
      <title>{meta['title']}</title>
      <description>Episode: {meta['title']}</description>
      <pubDate>{meta['date'].strftime('%a, %d %b %Y %H:%M:%S %Z')}</pubDate>
      <enclosure url="{file_url}" length="{file_size_bytes}" type="audio/mpeg" />
      <itunes:duration>00:30:00</itunes:duration>
      <itunes:author>パジ</itunes:author>
      <itunes:summary>Episode: {meta['title']}</itunes:summary>
      <guid isPermaLink="true">{file_url}</guid>
    </item>
"""
                  rss_content += item_xml
              
              # RSSの終了タグを追加
              rss_content += """  </channel>
</rss>
"""
              
              # 文字化け防止のためUTF-8で明示的に保存
              with open(OUTPUT_FILE, 'wb') as f:
                  f.write(rss_content.encode('utf-8'))
              
              print(f"Podcast RSS feed generated successfully: {OUTPUT_FILE}")
              
              # mp3ファイル一覧を取得し日付順にソート
              mp3_files = glob.glob(os.path.join(PODCAST_DIR, '*.mp3'))
              mp3_metadata = [get_mp3_metadata(f) for f in mp3_files]
              mp3_metadata.sort(key=lambda x: x['date'], reverse=True)
              
                  # 各エピソードの情報を追加
              for idx, meta in enumerate(mp3_metadata):
                  filepath = os.path.join(PODCAST_DIR, meta['filename'])
                  file_url = f"{RAW_BASE_URL}/{PODCAST_DIR}/{meta['filename']}"
                  
                  fe = fg.add_entry()
                  fe.id(file_url)
                  fe.title(meta['title'])
                  fe.description(f"Episode: {meta['title']}")
                  fe.pubDate(meta['date'])
                  fe.link(href=file_url, rel='alternate')
                  
                  # エンクロージャー（メディアファイル）の設定
                  fe.enclosure(file_url, str(file_size(filepath)), 'audio/mpeg')
                  
                  # iTunes固有のエピソード設定
                  # ファイルサイズから推定するのではなく、30分固定に設定
                  fe.podcast.itunes_duration('00:30:00')
                  fe.podcast.itunes_explicit('no')
                  fe.podcast.itunes_author(PODCAST_AUTHOR)
                  fe.podcast.itunes_summary(f"Episode: {meta['title']}")
                  
                  # GUIDの設定
                  fe.guid(file_url, permalink=True)
              
              # RSSの生成と保存
              rss_xml = fg.rss_str(pretty=True)
              
              # 文字化け防止のためUTF-8で明示的に保存
              with open(OUTPUT_FILE, 'wb') as f:
                  f.write(rss_xml)
              
              print(f"Podcast RSS feed generated successfully: {OUTPUT_FILE}")

          if __name__ == "__main__":
              generate_rss()
          EOF
          
      - name: Generate RSS feed
        run: |
          chmod +x .github/scripts/generate_podcast_rss.py
          python .github/scripts/generate_podcast_rss.py
        
      - name: Commit and push if changed
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "自動更新: podcast RSS feed"
          file_pattern: docs/podcast.xml
