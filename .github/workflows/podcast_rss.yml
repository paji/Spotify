name: Podcast RSS Generator

# 書き込み権限を明示的に要求
permissions:
  contents: write

on:
  schedule:
    - cron: '36 * * * *'  # 毎時間36分に実行
  workflow_dispatch:  # 手動実行用
  push:
    paths:
      - 'docs/podcast/**'  # podcast フォルダに変更があった場合に実行

jobs:
  generate-rss:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install feedgen
          
      - name: Create scripts directory
        run: mkdir -p .github/scripts
        
      - name: Create Python script
        run: |
          cat > .github/scripts/generate_podcast_rss.py << 'EOF'
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-

          import os
          import glob
          import datetime
          import time
          import re
          import xml.etree.ElementTree as ET

          # 基本設定
          PODCAST_DIR = 'gh-pages/docs/podcast'  # gh-pagesブランチのパス
          OUTPUT_FILE = 'docs/podcast.xml'  # mainブランチに出力
          BASE_URL = 'https://paji.github.io/Spotify'
          # mp3ファイルはGitHub Raw URLを使用して参照
          MP3_BASE_URL = 'https://raw.githubusercontent.com/paji/Spotify/gh-pages/docs/podcast'

          # ポッドキャスト情報
          PODCAST_TITLE = '裏・パジちゃんねる'
          PODCAST_DESCRIPTION = 'ブロックチェーンやAIなど最新テクノロジーについての考察を毎日配信、濃密情報はプレミアムへ→ https://voicy.jp/channel/2834/all?premium=1\n\nパジの日々の挑戦を記録していきます'
          PODCAST_AUTHOR = 'パジ'
          PODCAST_LINK = 'https://voicy.jp/channel/2834/all?premium=1'
          PODCAST_LANGUAGE = 'ja'
          PODCAST_COPYRIGHT = '© 2025 パジ'
          PODCAST_WEBMASTER = 'hajimeataka@gmail.com'
          PODCAST_TTL = '60'
          PODCAST_EXPLICIT = 'no'
          PODCAST_OWNER_NAME = 'パジ'
          PODCAST_OWNER_EMAIL = 'hajimeataka@gmail.com'
          PODCAST_CATEGORY = 'Technology'
          PODCAST_IMAGE_URL = 'https://pbs.twimg.com/profile_images/1616257394815954945/2W90KByr_400x400.jpg'

          def get_mp3_metadata(filepath):
              """
              ファイル名から簡易的なメタデータを抽出する
              例: '2024-03-19_episode_title.mp3' -> {'date': '2024-03-19', 'title': 'episode title'}
              """
              filename = os.path.basename(filepath)
              # ファイル名から日付とタイトルを抽出する正規表現
              match = re.match(r'(\d{4}-\d{2}-\d{2})_(.+)\.mp3', filename)
              
              if match:
                  date_str, title = match.groups()
                  # タイトルから最後の_{id}部分を削除
                  title_parts = title.rsplit('_', 1)
                  if len(title_parts) > 1 and title_parts[1].isdigit():
                      title = title_parts[0]
                  title = title.replace('_', ' ')  # アンダースコアをスペースに変換
                  try:
                      # 日付文字列をパースしてUTCタイムゾーンを設定
                      pub_date = datetime.datetime.strptime(date_str, '%Y-%m-%d')
                      pub_date = pub_date.replace(tzinfo=datetime.timezone.utc)
                      return {
                          'title': title,
                          'date': pub_date,
                          'filename': filename
                      }
                  except ValueError:
                      pass
              
              # 日付形式が一致しない場合はファイルの更新日時を使用
              file_mtime = os.path.getmtime(filepath)
              title = os.path.splitext(filename)[0]
              # タイトルから最後の_{id}部分を削除
              title_parts = title.rsplit('_', 1)
              if len(title_parts) > 1 and title_parts[1].isdigit():
                  title = title_parts[0]
              return {
                  'title': title.replace('_', ' '),
                  'date': datetime.datetime.fromtimestamp(file_mtime, tz=datetime.timezone.utc),
                  'filename': filename
              }

          def file_size(filepath):
              """ファイルサイズをバイト単位で返す"""
              return os.path.getsize(filepath)

          def generate_rss():
              # RSSフィードのXMLを直接構築
              rss_content = f"""<?xml version="1.0" encoding="UTF-8"?>
          <rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">
            <channel>
              <title>{PODCAST_TITLE}</title>
              <description>{PODCAST_DESCRIPTION}</description>
              <link>{PODCAST_LINK}</link>
              <language>{PODCAST_LANGUAGE}</language>
              <copyright>{PODCAST_COPYRIGHT}</copyright>
              <webMaster>{PODCAST_WEBMASTER}</webMaster>
              <ttl>{PODCAST_TTL}</ttl>
              <itunes:explicit>{PODCAST_EXPLICIT}</itunes:explicit>
              <itunes:author>{PODCAST_AUTHOR}</itunes:author>
              <itunes:owner>
                <itunes:name>{PODCAST_OWNER_NAME}</itunes:name>
                <itunes:email>{PODCAST_OWNER_EMAIL}</itunes:email>
              </itunes:owner>
              <itunes:category text="{PODCAST_CATEGORY}" />
              <image>
                <url>{PODCAST_IMAGE_URL}</url>
                <title>{PODCAST_TITLE}</title>
                <link>{PODCAST_LINK}</link>
              </image>
              <itunes:image href="{PODCAST_IMAGE_URL}" />
          """
              
              # mp3ファイル一覧を取得し日付順にソート
              mp3_files = glob.glob(os.path.join(PODCAST_DIR, '*.mp3'))
              
              # 有料放送（ファイル名の先頭がアンダースコア）を除外
              free_mp3_files = [f for f in mp3_files if not os.path.basename(f).startswith('_')]
              print(f"全ファイル数: {len(mp3_files)}, 無料放送ファイル数: {len(free_mp3_files)}")
              
              mp3_metadata = [get_mp3_metadata(f) for f in free_mp3_files]
              mp3_metadata.sort(key=lambda x: x['date'], reverse=True)
              
              # 各エピソードの情報を追加
              for idx, meta in enumerate(mp3_metadata):
                  filepath = os.path.join(PODCAST_DIR, meta['filename'])
                  file_url = f"{MP3_BASE_URL}/{meta['filename']}"
                  file_size_bytes = str(file_size(filepath))
                  
                  item_xml = f"""    <item>
                <title>{meta['title']}</title>
                <description>Episode: {meta['title']}</description>
                <pubDate>{meta['date'].strftime('%a, %d %b %Y %H:%M:%S %Z')}</pubDate>
                <enclosure url="{file_url}" length="{file_size_bytes}" type="audio/mpeg" />
                <itunes:duration>00:30:00</itunes:duration>
                <itunes:author>{PODCAST_AUTHOR}</itunes:author>
                <itunes:summary>Episode: {meta['title']}</itunes:summary>
                <guid isPermaLink="true">{file_url}</guid>
              </item>
          """
                  rss_content += item_xml
              
              # RSSの終了タグを追加
              rss_content += """  </channel>
          </rss>
          """
              
              # 文字化け防止のためUTF-8で明示的に保存
              with open(OUTPUT_FILE, 'wb') as f:
                  f.write(rss_content.encode('utf-8'))
              
              print(f"Podcast RSS feed generated successfully: {OUTPUT_FILE}")

          if __name__ == "__main__":
              generate_rss()
          EOF
          
      - name: Generate RSS feed
        run: |
          chmod +x .github/scripts/generate_podcast_rss.py
          python .github/scripts/generate_podcast_rss.py
        
      - name: Commit and push if changed
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "自動更新: podcast RSS feed"
          file_pattern: docs/podcast.xml
